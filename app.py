import os
import streamlit as st
import google.generativeai as genai
import chromadb
from chromadb import Documents, EmbeddingFunction, Embeddings
from langchain.text_splitter import RecursiveCharacterTextSplitter
import pypdf
import time


# –ö–ª–∞—Å—Å –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ Gemini —Å ChromaDB
class GeminiEmbeddingFunction(EmbeddingFunction):
    def __call__(self, input: Documents) -> Embeddings:
        model = 'models/text-embedding-004'
        title = "Custom query"
        return genai.embed_content(model=model,
                                   content=input,
                                   task_type="retrieval_document",
                                   title=title)["embedding"]

# --- –§–£–ù–ö–¶–ò–ò –î–õ–Ø RAG ---
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF
def load_and_process_pdfs_with_metadata(folder_path: str):
    st.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö PDF –∏–∑ –ø–∞–ø–∫–∏ {folder_path}...")
    
    all_chunks = []
    all_metadatas = []

    text_splitter = RecursiveCharacterTextSplitter(
        chunk_size=1000,
        chunk_overlap=100
    )

    for filename in os.listdir(folder_path):
        if filename.endswith(".pdf"):
            file_path = os.path.join(folder_path, filename)
            st.write(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: {filename}")
            try:
                reader = pypdf.PdfReader(file_path)
                text = ""
                for page in reader.pages:
                    text += page.extract_text()
                
                # –ù–∞—Ä–µ–∑–∞–µ–º –Ω–∞ —á–∞–Ω–∫–∏ —Ç–µ–∫—Å—Ç –û–î–ù–û–ì–û –¥–æ–∫—É–º–µ–Ω—Ç–∞
                chunks = text_splitter.split_text(text)
                
                # –î–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞–Ω–∫–∞ —Å–æ–∑–¥–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å –∏–º–µ–Ω–µ–º —Ñ–∞–π–ª–∞
                for chunk in chunks:
                    all_chunks.append(chunk)
                    # –í –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –º–æ–∂–µ—Ç –±—ã—Ç—å –ª—é–±–∞—è –ø–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                    all_metadatas.append({'source': filename})

            except Exception as e:
                st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª {filename}: {e}")

    st.info(f"–í—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã —Ä–∞–∑–¥–µ–ª–µ–Ω—ã –Ω–∞ {len(all_chunks)} —á–∞—Å—Ç–µ–π (—á–∞–Ω–∫–æ–≤).")
    return all_chunks, all_metadatas

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
# @st.cache_resource - —ç—Ç–æ—Ç –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –∫—ç—à–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ñ—É–Ω–∫—Ü–∏–∏.
# –≠—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ PDF –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –∏ –±–∞–∑–∞ —Å–æ–∑–¥–∞–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ.
@st.cache_resource
def setup_database(folder_path):
    st.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    client = chromadb.PersistentClient(path="./chroma_db")
    embedding_function = GeminiEmbeddingFunction()
    
    collection = client.get_or_create_collection(
        name="gitlab_handbook_collection",
        embedding_function=embedding_function
    )
    
    # --- –ö–õ–Æ–ß–ï–í–û–ï –ò–ó–ú–ï–ù–ï–ù–ò–ï ---
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
    if collection.count() > 0:
        st.sidebar.success("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞.")
        return collection
    
    # –ï—Å–ª–∏ –∫–æ–ª–ª–µ–∫—Ü–∏—è –ø—É—Å—Ç–∞, —Ç–æ –≤—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–ª–Ω—É—é –∑–∞–≥—Ä—É–∑–∫—É
    st.sidebar.warning("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ó–∞–ø—É—Å–∫–∞—é –ø–æ–ª–Ω—É—é –∏–Ω–¥–µ–∫—Å–∞—Ü–∏—é –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤. –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç...")
    
    chunks, metadatas = load_and_process_pdfs_with_metadata(folder_path)
    
    st.info("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —á–∞–Ω–∫–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
    collection.add(
        ids=[str(i) for i in range(len(chunks))],
        documents=chunks,
        metadatas=metadatas
    )
    st.sidebar.success("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏ –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
    return collection


# --- –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ---
try:
    genai.configure(api_key=st.secrets["GOOGLE_API_KEY"])
    model = genai.GenerativeModel('gemini-1.5-flash')
    PDF_FOLDER_PATH = "data/"
    db_collection = setup_database(PDF_FOLDER_PATH)
    model_initialized = True
except Exception as e:
    st.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏: {e}")
    model_initialized = False


def get_response(user_query: str, collection) -> tuple[str, str]:
    """
    –í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—ã–π RAG-—Ü–∏–∫–ª:
    1. –ù–∞—Ö–æ–¥–∏—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —á–∞–Ω–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.
    2. –°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ–º–ø—Ç –¥–ª—è LLM, –≤–∫–ª—é—á–∞—è –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —á–∞–Ω–∫–∏.
    3. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç —Å –ø–æ–º–æ—â—å—é LLM.
    4. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∏.
    """
    
    # 1. –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ (Retrieval)
    results = collection.query(
        query_texts=[user_query],
        n_results=3, # –ë–µ—Ä–µ–º 3 –Ω–∞–∏–±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —á–∞–Ω–∫–∞
        include=['documents', 'metadatas']
    )
    retrieved_docs = results['documents'][0]
    
    # –ì–æ—Ç–æ–≤–∏–º –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    sources_text = ""
    retrieved_metadatas = results['metadatas'][0]
    for i, doc in enumerate(retrieved_docs):
        source = retrieved_metadatas[i]['source']
        sources_text += f"**–ò—Å—Ç–æ—á–Ω–∏–∫: {source}**\n"
        sources_text += f"{doc}\n\n---\n\n"

    # 2. –î–æ–ø–æ–ª–Ω–µ–Ω–∏–µ (Augmentation) - –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞
    prompt_template = f"""
    –¢—ã ‚Äî –ø–æ–ª–µ–∑–Ω—ã–π –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –æ–Ω–±–æ—Ä–¥–∏–Ω–≥—É –≤ –∫–æ–º–ø–∞–Ω–∏–∏ GitLab. 
    –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –Ω–æ–≤—ã—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤, –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –ò–°–ö–õ–Æ–ß–ò–¢–ï–õ–¨–ù–û –Ω–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ç–µ–±–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞—Ö —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º —è–∑—ã–∫–µ –∏–∑ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ ('PASSAGES').

    ***–í–ê–ñ–ù–û: –¢–≤–æ–π —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç –≤—Å–µ–≥–¥–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ –†–£–°–°–ö–û–ú –Ø–ó–´–ö–ï.***

    –¢–æ–Ω —Ç–≤–æ–µ–≥–æ –æ—Ç–≤–µ—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–º.
    –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π –æ—Ç–≤–µ—Ç —Ç–∞–∫, —á—Ç–æ–±—ã –µ–≥–æ –±—ã–ª–æ –ª–µ–≥–∫–æ —á–∏—Ç–∞—Ç—å. –ò—Å–ø–æ–ª—å–∑—É–π —Å–ø–∏—Å–∫–∏, –µ—Å–ª–∏ —ç—Ç–æ —É–º–µ—Å—Ç–Ω–æ.
    
    –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞—Ö, –≤–µ–∂–ª–∏–≤–æ –æ—Ç–≤–µ—Ç—å –ø–æ-—Ä—É—Å—Å–∫–∏: 
    "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, —è –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ —Ç–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –≤–∞—à–µ–º—É –≤–æ–ø—Ä–æ—Å—É –≤ –¥–æ—Å—Ç—É–ø–Ω–æ–π –º–Ω–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏."
    –ù–µ –ø—Ä–∏–¥—É–º—ã–≤–∞–π –Ω–∏—á–µ–≥–æ –æ—Ç —Å–µ–±—è.

    –í–æ—Ç —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º:
    PASSAGES:
    {retrieved_docs}

    –ê –≤–æ—Ç –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–æ–Ω –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–∞ –ª—é–±–æ–º —è–∑—ã–∫–µ):
    QUESTION:
    {user_query}

    ANSWER (–Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ):
    """

    # 3. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è (Generation)
    try:
        final_response = model.generate_content(prompt_template)
        return final_response.text, sources_text
    except Exception as e:
        return f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}", ""


# --- –ò–ù–¢–ï–†–§–ï–ô–° –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø (UI) ---
st.title("GitLab Onboarding Assistant üöÄ")
st.info("–≠—Ç–æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ GitLab, –∏—Å–ø–æ–ª—å–∑—É—è RAG-—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—é. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–ø—Ä–æ—Å–∏—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å!")

# --- –†–ï–®–ï–ù–ò–ï –ü–†–û–ë–õ–ï–ú–´ 1: –ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤ ---
st.subheader("–ò–ª–∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –æ–¥–∏–Ω –∏–∑ —ç—Ç–∏—Ö –ø—Ä–∏–º–µ—Ä–æ–≤:")

# –°–æ–∑–¥–∞–µ–º —Ç—Ä–∏ –∫–æ–ª–æ–Ω–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫
col1, col2, col3 = st.columns(3)

# –°–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤
example_questions = [
    "What are the six core values of GitLab?",
    "Describe the process for taking time off.",
    "What is GitLab's philosophy on 'boring solutions'?"
]

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏
def run_query(question):
    with st.spinner("–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç..."):
        response, sources = get_response(question, db_collection)
    
    st.session_state.response = response
    st.session_state.sources = sources

with col1:
    if st.button(example_questions[0]):
        run_query(example_questions[0])
        
with col2:
    if st.button(example_questions[1]):
        run_query(example_questions[1])

with col3:
    if st.button(example_questions[2]):
        run_query(example_questions[2])

st.divider() # –ì–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω–∞—è —á–µ—Ä—Ç–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è

# --- –û—Å–Ω–æ–≤–Ω–æ–µ –ø–æ–ª–µ –≤–≤–æ–¥–∞ ---
query = st.text_input("–ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –∑–¥–µ—Å—å:", placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –∫–∞–∫ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ–Ω–±–æ—Ä–¥–∏–Ω–≥–∞?")

if st.button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å", type="primary"):
    if query:
        run_query(query)
    else:
        st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å.")

# –ò—Å–ø–æ–ª—å–∑—É–µ–º st.session_state, —á—Ç–æ–±—ã –æ—Ç–≤–µ—Ç –Ω–µ –ø—Ä–æ–ø–∞–¥–∞–ª –ø—Ä–∏ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–∏ —Å –¥—Ä—É–≥–∏–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
if 'response' in st.session_state:
    st.success("–û—Ç–≤–µ—Ç, —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤:")
    st.markdown(st.session_state.response)
    
    with st.expander("‚úÖ –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –æ—Ç–≤–µ—Ç"):
        st.markdown(st.session_state.sources)
