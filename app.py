import os
import streamlit as st
import google.generativeai as genai
import chromadb
from chromadb import Documents, EmbeddingFunction, Embeddings
from langchain.text_splitter import RecursiveCharacterTextSplitter
import pypdf
import time


# –ö–ª–∞—Å—Å –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ Gemini —Å ChromaDB
class GeminiEmbeddingFunction(EmbeddingFunction):
    def __call__(self, input: Documents) -> Embeddings:
        model = 'models/text-embedding-004'
        title = "Custom query"
        return genai.embed_content(model=model,
                                   content=input,
                                   task_type="retrieval_document",
                                   title=title)["embedding"]

# --- –§–£–ù–ö–¶–ò–ò –î–õ–Ø RAG ---
# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ PDF
def load_and_process_pdfs_with_metadata(folder_path: str):
    st.info(f"–ó–∞–≥—Ä—É–∑–∫–∞ –≤—Å–µ—Ö PDF –∏–∑ –ø–∞–ø–∫–∏ {folder_path}...")
    
    all_chunks = []
    all_metadatas = []

    text_splitter = RecursiveCharacterTextSplitter(
        chunk_size=1000,
        chunk_overlap=100
    )

    for filename in os.listdir(folder_path):
        if filename.endswith(".pdf"):
            file_path = os.path.join(folder_path, filename)
            st.write(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ñ–∞–π–ª–∞: {filename}")
            try:
                reader = pypdf.PdfReader(file_path)
                text = ""
                for page in reader.pages:
                    text += page.extract_text()
                
                # –ù–∞—Ä–µ–∑–∞–µ–º –Ω–∞ —á–∞–Ω–∫–∏ —Ç–µ–∫—Å—Ç –û–î–ù–û–ì–û –¥–æ–∫—É–º–µ–Ω—Ç–∞
                chunks = text_splitter.split_text(text)
                
                # –î–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞–Ω–∫–∞ —Å–æ–∑–¥–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ —Å –∏–º–µ–Ω–µ–º —Ñ–∞–π–ª–∞
                for chunk in chunks:
                    all_chunks.append(chunk)
                    # –í –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –º–æ–∂–µ—Ç –±—ã—Ç—å –ª—é–±–∞—è –ø–æ–ª–µ–∑–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                    all_metadatas.append({'source': filename})

            except Exception as e:
                st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ñ–∞–π–ª {filename}: {e}")

    st.info(f"–í—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã —Ä–∞–∑–¥–µ–ª–µ–Ω—ã –Ω–∞ {len(all_chunks)} —á–∞—Å—Ç–µ–π (—á–∞–Ω–∫–æ–≤).")
    return all_chunks, all_metadatas

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
# @st.cache_resource - —ç—Ç–æ—Ç –¥–µ–∫–æ—Ä–∞—Ç–æ—Ä –∫—ç—à–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Ñ—É–Ω–∫—Ü–∏–∏.
# –≠—Ç–æ –∑–Ω–∞—á–∏—Ç, —á—Ç–æ PDF –±—É–¥–µ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å—Å—è –∏ –±–∞–∑–∞ —Å–æ–∑–¥–∞–≤–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—É—Å–∫–µ.
@st.cache_resource
def setup_database(folder_path):
    # –ü–æ–ª—É—á–∞–µ–º –∏ —á–∞–Ω–∫–∏, –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    chunks, metadatas = load_and_process_pdfs_with_metadata(folder_path)
    
    st.info("–°–æ–∑–¥–∞–Ω–∏–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö (ChromaDB)...")
    client = chromadb.Client()
    embedding_function = GeminiEmbeddingFunction()
    collection = client.get_or_create_collection(
        name="gitlab_handbook_collection",
        embedding_function=embedding_function
    )
    
    st.info("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —á–∞–Ω–∫–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä 'metadatas' –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏
    collection.add(
        ids=[str(i) for i in range(len(chunks))],
        documents=chunks,
        metadatas=metadatas # <-- –í–æ—Ç –∑–¥–µ—Å—å –º—ã –ø–µ—Ä–µ–¥–∞–µ–º –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ
    )
    st.success("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ!")
    return collection


# --- –û–°–ù–û–í–ù–ê–Ø –õ–û–ì–ò–ö–ê –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø ---
try:
    genai.configure(api_key=st.secrets["GOOGLE_API_KEY"])
    model = genai.GenerativeModel('gemini-1.5-flash')
    PDF_FOLDER_PATH = "data/"
    db_collection = setup_database(PDF_FOLDER_PATH)
    model_initialized = True
except Exception as e:
    st.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏: {e}")
    model_initialized = False


# --- –ò–ù–¢–ï–†–§–ï–ô–° –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø (UI) ---
st.title("GitLab Onboarding Assistant üöÄ")
st.info("–ë–æ—Ç, –æ—Ç–≤–µ—á–∞—é—â–∏–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ GitLab.")

# –í—Ä–µ–º–µ–Ω–Ω–æ –≤—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ –±–∞–∑–µ
if model_initialized:
    st.sidebar.success(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {db_collection.count()}")

# –ò–∑–º–µ–Ω—è–µ–º get_response –¥–ª—è –ò—Ç–µ—Ä–∞—Ü–∏–∏ 4
def get_response(user_query: str, collection) -> str:
    st.info("–ü–æ–∏—Å–∫ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...")
    results = collection.query(
        query_texts=[user_query],
        n_results=3,
        include=['documents', 'metadatas'] # <-- –ü—Ä–æ—Å–∏–º –≤–µ—Ä–Ω—É—Ç—å –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ!
    )
    
    retrieved_docs = results['documents'][0]
    retrieved_metadatas = results['metadatas'][0]
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∫—Ä–∞—Å–∏–≤—ã–π –≤—ã–≤–æ–¥ —Å —É–∫–∞–∑–∞–Ω–∏–µ–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞–Ω–∫–∞
    response_with_sources = ""
    for i, doc in enumerate(retrieved_docs):
        source = retrieved_metadatas[i]['source']
        response_with_sources += f"**–ò—Å—Ç–æ—á–Ω–∏–∫: {source}**\n"
        response_with_sources += f"{doc}\n\n---\n\n"
        
    return response_with_sources


query = st.text_input("–ó–∞–¥–∞–π—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:", placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –∫–∞–∫ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π merge request?")

if st.button("–û—Ç–ø—Ä–∞–≤–∏—Ç—å", type="primary", disabled=not model_initialized):
    if query:
        with st.spinner("–ò—â—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏..."):
            response = get_response(query, db_collection)
        st.success("–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏:")
        st.markdown(response)
    else:
        st.warning("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å.")

if not model_initialized:
    st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å –∏–ª–∏ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á –∏ –Ω–∞–ª–∏—á–∏–µ PDF —Ñ–∞–π–ª–∞.")